server {
	listen 80 default_server;
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	error_log /proc/self/fd/2;
	access_log /proc/self/fd/1;
	return 503;
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

	{{ range $index, $value := $containers }}

	upstream {{$value.Name}} {

		{{ $addrLen := len $value.Addresses }}
		{{ $network := index $value.Networks 0 }}
		
		{{/* If only 1 port exposed, use that */}}
		{{ if eq $addrLen 1 }}
			{{ with $address := index $value.Addresses 0 }}
				# {{$value.Name}}
				server {{ $network.IP }}:{{ $address.Port }};
			{{ end }}

		{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
		{{ else if $value.Env.VIRTUAL_PORT }}
			{{ range $i, $address := $value.Addresses }}
				{{ if eq $address.Port $value.Env.VIRTUAL_PORT }}
				# {{$value.Name}}
				server {{ $network.IP }}:{{ $address.Port }};
				{{ end }}
			{{ end }}

		{{/* Else default to standard web port 80 */}}
		{{ else }}
			{{ range $i, $address := $value.Addresses }}
				{{ if eq $address.Port "80" }}
				# {{$value.Name}}
				server {{ $network.IP }}:{{ $address.Port }};
				{{ end }}
			{{ end }}
		{{ end }}
	}
	{{ end }}

	server {
		gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

		server_name {{ $host }};
		proxy_buffering off;
		error_log /proc/self/fd/2;
		access_log /proc/self/fd/1;

	{{ range $index, $value := $containers }}

		location /{{ $value.Env.VIRTUAL_PATH }}/ {
			

			{{ if $value.Env.VIRTUAL_PATH_TARGET }}
			proxy_pass http://{{$value.Name}}/{{$value.Env.VIRTUAL_PATH_TARGET}}/;
			proxy_redirect http://{{ $host }}/{{ $value.Env.VIRTUAL_PATH }}/ /{{$value.Env.VIRTUAL_PATH_TARGET}}/;
			{{ else }}
			proxy_pass http://{{$value.Name}}/;
			proxy_redirect http://{{ $host }}/{{ $value.Env.VIRTUAL_PATH }}/ /;
			{{ end }}

			
			proxy_set_header Host $http_host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;

			# HTTP 1.1 support
			proxy_http_version 1.1;
			proxy_set_header Connection "";

			#Sockets
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
		}
		
	{{ end }}
	}

{{ end }}